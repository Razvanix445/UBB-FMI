1. Scrieți o expresie regulară care să accepte doar linii de lungime multiplu de 5 plus 2.

^.{2}(.{5})*$
grep -E '^(.....){1,}..$'

2. Scrieți o comandă shell care afișează liniile dintr-un fișier care conțin cuvinte care încep cu majuscule.

grep -h '\<[A-Z][a-zA-Z]*\>' a.txt

3. Scrieți o comandă shell care interschimbă toate perechile de cifre vecine din fișierul b.txt.

sed 's/\([0-9]\)\([0-9]\)/\2\1/g' b.txt

4. Scrieți o comandă shell care afișează pentru fiecare linie suma numerelor. Fișierul c.txt conține pe fiecare linie două numere separate prin spațiu.

awk '
{s=0; 
 for(i=1; i<=NF; i++) {
     s+=&i
 }
 print s
}' c.txt






Exemple manual Boian:

GREP

1. Afișează primele 5 linii alfabetic:

sort a.txt | head -n 5

2. Afișează toate liniile care conțin "dan":

grep -E "dan" a.txt

3. Afișează toate liniile utilizatorilor care au cel puțin două vocale în username:

grep -E -i "^[^:]*([aeiou][^:]*){2,}:" /etc/passwd

4. Afișează toate liniile care conțin ion ca nume. Numele este al cincilea field:

grep -E -i "^([^:]*:){4}[^:]*\<ion\>" /etc/passwd

5. Afișează toate liniile care nu sunt goale:

grep -E "." a.txt

6. Afișează toate liniile goale:

grep -E "^$" a.txt

7. Afișează toate liniile care conțin un număr impar:

grep -E "^(..)*.$" a.txt

8. Afișează toate liniile care conțin nume de ocean:

grep -E -i "\<atlantic\>|\<pacific\>|\<indian\>|\<arctic\>|\<antarctic\>" a.txt

9. Afișează toate linile care conțin o adresă de email:

grep -E -i "\<[^@*\!?]+@[a-z0-9_-]+(\.[a-z0-9_-]+)+\>" a.txt

GREP notații

-E          - expresii regulare extinse
-h          - nu afișează și numele fișierului
-v          - afișează liniile care nu fac match cu expresia regulară
-i          - ignoră Case-Sensitive
-q          - nu afișează liniile cu care face match, doar face exit 0 dacă este găsit, exit 1 dacă nu este găsit


\           - escape, schimbă înțelesul caracterului (normal -> special)
\<  \>      - delimitatori cuvinte intregi
*           - caracterul apare de 0 sau mai multe ori
.           - face match cu orice caracter
+           - caracterul apare de 1 sau mai multe ori
?           - caracterul apare de 0 sau 1 ori
|           - pipe / alternativă între două opțiuni
()          - grupează caractere într-o expresie
[abc]       - face match cu orice caracter care apare în listă
[a-z]       - face match cu orice caracter din range
[^a-z]      - face match cu orice caracter din afara range-ului
^           - început de linie
$           - sfârșit de linie
\<          - început de cuvânt
\>          - sfârșit de cuvânt
{m,n}       - expresia anterioară de cel puțin m, cel mult n ori

.*          - orice secvență de caractere
^[^0-9]+$   - linii care conțin orice carectere, exceptând cifre


SED

1. Afișează toate liniile, înlocuind vocalele cu spații:

sed -E "s/[aeiou]/ /gi" a.txt

2. Afișează toate liniile, înlocuind toate vocalele cu majuscule:

sed -E "y/aeiou/AEIOU/" a.txt

3. Afișează toate liniile, ștergând cele care conțin numere de 5 sau mai multe cifre:

sed -E "/[0-9]{5,}/d" a.txt

4. Afișează toate liniile, interschimbând toate perechile de litere:

sed -E "s/([a-z])([a-z])/\2\1/gi" a.txt

5. Afișează toate liniile, duplicând toate vocalele:

sed -E "s/([aeiou])/\1\1/gi" a.txt

6. Afișează toate liniile, schimbând literele în cifre (Bogdan -> B09d4n):

sed -E "y/elaoszbg/31405289" a.txt

7. Afișează toate liniile, încadrând între paranteze toate perechile de 3 sau mai multe vocale:

sed -E "s/([aeiou]{3,})/(\1)/gi" a.txt


SED notații

sed -E "s/regex/replacement/gi" a.txt - face search-replace
g           - global
i           - căutare case-insensitive

sed -E "y/caractere/replacement/" a.txt

sed -E "/regex/d" a.txt               - sterge linia


AWK

1. Afișează numele de pe liniile impare:

awk -F: 'NR % 2 == 1 {print $5}' /etc/passwd

2. Afișează directorul utilizatorilor care au username-urile începând cu o vocală:

awk -F: '/^[aeiouAEIOU]/ {print $6}' /etc/passwd

3. Afișează numele complete ale tuturor utilizatorilor care au username mai lung de 10 caractere:

awk -F: 'length($1) > 10 {print $5}' /etc/passwd

4. Afișează suma tuturor id-urilor utilizatorilor:

BEGIN {sum=0} {sum += $3} END {print sum}

5. Afișează produsul diferenței dintre id-ul utilizatorului și id-ul grupului:

BEGIN {prod=1} {prod *= $3-$4} END {print prod}

6. Afișează numele întregi ale studenților din grupa 211:

awk -F: '$6 ~ /\/gr211\// {print $5}' /etc/passwd

7. Numără câți băieți și câte fete utilizatori sunt în /etc/passwd. Toți utilizatorii au ultimul lor nume primul nume din câmpul 5. Toate fetele au unul din primul sau al doilea nume sfârșindu-se cu litera a.

BEGIN {m=0 w=0} $5 ~ / [a-zA-Z]*[b-z]\>/ {m++} $5 ~ / [a-zA-Z]*a\>/ {w++} END {print "Baieti: ", m print "Fete: ", w}



AWK notații

NR           - numarul liniei curente
NF           - numarul campurilor de pe linia curenta
$0           - toata linia
$1, $2, ...  - campurile de pe linia curenta
-F           - separator

2> /dev/null     2> output.err             - ascunde erorile de permission denied date de find
... | sort | uniq -c | sort -n -r | less  - afișează descrescător după numărul de apariții